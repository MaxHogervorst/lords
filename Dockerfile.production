# ============================================
# Stage 1: Build frontend assets with Node.js
# ============================================
FROM node:20-alpine AS frontend-builder

WORKDIR /build

# Copy package files
COPY package*.json ./

# Install npm dependencies (including dev dependencies needed for build)
RUN npm ci

# Copy source files needed for build
COPY resources/js ./resources/js
COPY resources/css ./resources/css
COPY vite.config.js ./

# Build production assets
RUN npm run build

# ============================================
# Stage 2: Build PHP application with FrankenPHP
# ============================================
FROM dunglas/frankenphp:1-php8.4-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    git \
    curl \
    libpng-dev \
    oniguruma-dev \
    libxml2-dev \
    zip \
    unzip \
    libzip-dev \
    postgresql-client \
    postgresql-dev \
    freetype-dev \
    libjpeg-turbo-dev \
    linux-headers

# Install PHP extensions required by Laravel and Octane
RUN install-php-extensions \
    pdo_pgsql \
    pgsql \
    mbstring \
    exif \
    pcntl \
    bcmath \
    gd \
    zip \
    sockets \
    opcache

# Configure OPcache for Octane production (optimized for 512MB RAM)
# Note: With Octane, preloading is not needed since app stays bootstrapped
# Note: Reduced memory from 128MB to 64MB (no preload overhead)
RUN { \
    echo 'opcache.enable=1'; \
    echo 'opcache.enable_cli=1'; \
    echo 'opcache.memory_consumption=64'; \
    echo 'opcache.interned_strings_buffer=8'; \
    echo 'opcache.max_accelerated_files=10000'; \
    echo 'opcache.validate_timestamps=0'; \
    echo 'opcache.save_comments=1'; \
    echo 'opcache.fast_shutdown=1'; \
    } > /usr/local/etc/php/conf.d/opcache.ini

# Configure PHP for production (optimized for 512MB RAM)
RUN { \
    echo 'expose_php=Off'; \
    echo 'display_errors=Off'; \
    echo 'log_errors=On'; \
    echo 'error_log=/app/storage/logs/php-error.log'; \
    echo 'max_execution_time=30'; \
    echo 'memory_limit=256M'; \
    echo 'post_max_size=20M'; \
    echo 'upload_max_filesize=20M'; \
    } > /usr/local/etc/php/conf.d/production.ini

# Get latest Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /app

# Copy composer files
COPY composer.json composer.lock ./

# Install PHP dependencies (production, no dev dependencies)
RUN composer install --no-dev --no-scripts --no-autoloader --prefer-dist --optimize-autoloader

# Copy application code
COPY . .

# Copy built frontend assets from frontend-builder stage
COPY --from=frontend-builder /build/public/build ./public/build

# Generate optimized autoload files
RUN composer dump-autoload --optimize --no-dev

# Create cache and log directories and set permissions
RUN mkdir -p /app/storage/framework/{sessions,views,cache} \
    && mkdir -p /app/bootstrap/cache \
    && chown -R www-data:www-data /app \
    && chmod -R 755 /app/storage \
    && chmod -R 755 /app/bootstrap/cache

# Create startup script
RUN echo '#!/bin/sh' > /start.sh && \
    echo 'set -e' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Clear old caches to ensure fresh config from .env' >> /start.sh && \
    echo 'php artisan config:clear' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Run migrations with fresh config' >> /start.sh && \
    echo 'php artisan migrate --force' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Build optimized caches (Octane workers will load these)' >> /start.sh && \
    echo 'php artisan config:cache' >> /start.sh && \
    echo 'php artisan route:cache' >> /start.sh && \
    echo 'php artisan view:cache' >> /start.sh && \
    echo 'php artisan event:cache' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Start Nightwatch agent in background' >> /start.sh && \
    echo 'php artisan nightwatch:agent &' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Start Octane (FrankenPHP) in foreground' >> /start.sh && \
    echo 'exec php artisan octane:frankenphp --host=0.0.0.0 --port=8080 --workers=1 --max-requests=500' >> /start.sh && \
    chmod +x /start.sh

# Expose port (FrankenPHP default is 8000, but we'll use 8080 to match existing setup)
EXPOSE 8080

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Start the application
CMD ["/start.sh"]
